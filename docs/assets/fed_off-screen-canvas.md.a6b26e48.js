import{_ as s,c as a,o as n,N as l}from"./chunks/framework.f0874142.js";const i=JSON.parse('{"title":"离屏 Canvas(OffscreenCanvas)","description":"","frontmatter":{},"headers":[],"relativePath":"fed/off-screen-canvas.md","lastUpdated":1680494239000}'),o={name:"fed/off-screen-canvas.md"},e=l(`<h1 id="离屏-canvas-offscreencanvas" tabindex="-1">离屏 Canvas(OffscreenCanvas) <a class="header-anchor" href="#离屏-canvas-offscreencanvas" aria-label="Permalink to &quot;离屏 Canvas(OffscreenCanvas)&quot;">​</a></h1><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><p>离屏 Canvas(OffscreenCanvas) 是 HTML5 提供的一个 API，可以在 Web Worker 中创建一个 Canvas 对象，这个对象没有对应的在 DOM 树中显示的 Canvas 元素，可用于在后台线程中执行复杂的绘图操作，而不会影响主线程的性能。</p><p>OffscreenCanvas 的主要作用是在 Web 应用程序中进行高效的图形处理。传统的 Canvas 绘图是在主线程中进行的，如果进行复杂的绘图操作，会占用主线程的资源，导致页面卡顿。使用 OffscreenCanvas 可以将复杂的绘图操作转移到 Web Worker 中，在后台线程中完成，避免了对主线程的影响，从而提高了 Web 应用程序的性能和用户体验。</p><h2 id="与普通-canvas-的区别" tabindex="-1">与普通 canvas 的区别 <a class="header-anchor" href="#与普通-canvas-的区别" aria-label="Permalink to &quot;与普通 canvas 的区别&quot;">​</a></h2><p>OffscreenCanvas 与传统的 Canvas 对象非常相似，都同时支持 2D 和 WebGL 渲染上下文。不同的是，OffscreenCanvas 是在 Web Worker 中创建的，只能在 Web Worker 中使用, 并且不能直接显示在页面中。需要将绘制结果传递给主线程进行显示。</p><p>具体来说，OffscreenCanvas 的优势在于：</p><p><strong>多线程处理</strong> OffscreenCanvas 可以在 Web Worker 中进行多线程处理，不会阻塞主线程，从而提高页面的性能和响应速度。</p><p><strong>内存使用</strong> OffscreenCanvas 可以在 Web Worker 中创建，因此可以使用更多的内存进行图像处理。而普通的 Canvas 则受制于浏览器限制的内存大小。</p><p><strong>安全性</strong> 由于 OffscreenCanvas 是在 Web Worker 中创建的，因此可以更好地保护页面的安全性，避免了恶意脚本的攻击。</p><h2 id="浏览器支持情况" tabindex="-1">浏览器支持情况 <a class="header-anchor" href="#浏览器支持情况" aria-label="Permalink to &quot;浏览器支持情况&quot;">​</a></h2><p>OffscreenCanvas 是一个实验性的特性, 但已获得所有主流浏览器的支持:</p><table><thead><tr><th style="text-align:left;">浏览器</th><th style="text-align:left;">支持版本</th></tr></thead><tbody><tr><td style="text-align:left;">Chrome</td><td style="text-align:left;">&gt;= 69</td></tr><tr><td style="text-align:left;">Edge</td><td style="text-align:left;">&gt;= 79</td></tr><tr><td style="text-align:left;">Safari</td><td style="text-align:left;">&gt;= 16.4</td></tr><tr><td style="text-align:left;">Firefox</td><td style="text-align:left;">&gt;= 105</td></tr></tbody></table><h2 id="如何使用" tabindex="-1">如何使用 <a class="header-anchor" href="#如何使用" aria-label="Permalink to &quot;如何使用&quot;">​</a></h2><ol><li>创建 OffscreenCanvas 对象, 并传递给 Worker</li></ol><p>在主线程中使用 <code>new OffscreenCanvas(width, height)</code> 方法创建 OffscreenCanvas 对象，其中 <code>width</code> 和 <code>height</code> 分别是 OffscreenCanvas 的宽度和高度。需要注意的是，OffscreenCanvas 不会被添加到 DOM 树中，因此不会显示在页面上，只能在 Web Worker 中进行绘图操作。</p><ol start="2"><li>在 Worker 中进行绘图操作, 并将绘图结果回传给主线程</li></ol><p>在 <code>Web Worker</code> 中使用 <code>OffscreenCanvas.transferToImageBitmap()</code> 方法将 <code>OffscreenCanvas</code> 对象转换为 <code>ImageBitmap</code> 对象，并使用 <code>ImageBitmap</code> 对象进行绘图操作。可以使用 <code>CanvasRenderingContext2D</code> 或 <code>WebGL</code> 等 API 进行绘图，完成后将结果通过 <code>postMessage()</code> 方法发送回主线程，在主线程中将结果绘制到 Canvas 元素上。</p><p>需要注意的是，由于 OffscreenCanvas 在 Web Worker 中创建，因此需要注意跨线程通信的问题。可以通过 postMessage()方法在主线程和 Worker 线程之间进行通信，从而实现数据的传递和共享。</p><p>下面是一个简单的示例代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// main.js</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在主线程中创建 OffscreenCanvas 对象, 将其传递给Worker</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 并等待 Worker 传回的绘制结果, 将结果绘制在主线程的普通 Canvas 上</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> offscreen </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OffscreenCanvas</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">300</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">300</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> worker </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Worker</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">worker.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">worker</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">canvas</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> offscreen </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> [offscreen])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">worker</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">canvas</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">canvas</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ctx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">canvas</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getContext</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">drawImage</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">imageBitmap</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// worker.js</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在 Worker 线程中拿到 OffscreenCanvas 对象, 进行绘图操作</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 并将绘制结果传回主线程展示</span></span>
<span class="line"><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offscreen</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">canvas</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offscreen</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getContext</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fillStyle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fillRect</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">300</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">300</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">imageBitmap</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offscreen</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transferToImageBitmap</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">imageBitmap</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">imageBitmap</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>这个示例代码创建一个 300x300 的 OffscreenCanvas 对象，在 Worker 线程中绘制一个红色的矩形，并将结果通过 ImageBitmap 对象发送回主线程，最终将结果绘制到页面上的 Canvas 元素上。</p><p>另一种使用方法是, 将主线程现有的 canvas 元素转换成离屏 canvas, 将控制权转交给 worker, 在 worker 中绘制 canvas, 而不需要再通过 web worker 通信来传递绘制的效果</p><ol><li>使用 <code>HTMLCanvasElement.transferControlToOffscreen()</code> 从主线程的 HTMLCanvasElement 对象返回一个 OffscreenCanvas 对象</li><li>将 OffscreenCanvas 传递给 worker, 直接在 worker 中更新 canvas</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// main.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> offscreen </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">canvas</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">transferControlToOffscreen</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">worker</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">canvas</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> offscreen </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> [offscreen])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// worker.js</span></span>
<span class="line"><span style="color:#82AAFF;">onmessage</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offscreen</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">canvas</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offscreen</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getContext</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fillStyle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fillRect</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">300</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">300</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><p><strong>图像处理</strong> OffscreenCanvas 可以在 Web Worker 中对大量图像进行处理，从而提高页面性能。例如，可以使用 OffscreenCanvas 进行图像压缩, 尺寸缩放、风格滤镜、颜色调整等操作，从而实现前端图片处理。</p><p><strong>数据可视化</strong> OffscreenCanvas 可以用于可视化大屏中的高性能绘图，例如在绘制大量数据点时，可以使用 OffscreenCanvas 进行绘图，从而提高页面性能和响应速度。</p><h2 id="ref" tabindex="-1">ref <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;ref&quot;">​</a></h2><ul><li><a href="https://caniuse.com/mdn-api_offscreencanvas" target="_blank" rel="noreferrer">CanIUse OffScreenCanvas 浏览器支持</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/OffscreenCanvas" target="_blank" rel="noreferrer">MDN OffScreenCanvas</a></li><li><a href="https://juejin.cn/post/7026887864289853470" target="_blank" rel="noreferrer">使用 OffscreenCanvas 提升 Canvas 性能</a></li></ul>`,30),p=[e];function t(r,c,y,F,D,C){return n(),a("div",null,p)}const f=s(o,[["render",t]]);export{i as __pageData,f as default};
